# -*- coding: utf-8 -*-
"""Aprendizado de MÃ¡quina.ipynb

Automatically generated by Colaboratory.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.metrics import classification_report
import re
import string
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, VotingClassifier

# Le os dados
data_fake = pd.read_csv('/content/drive/MyDrive/datasets/Fake.csv')
data_true = pd.read_csv('/content/drive/MyDrive/datasets/True.csv')

# Adiciona classe
data_fake["class"] = 0
data_true["class"] = 1

# Concatena os dataframes
data_merge = pd.concat([data_fake, data_true], axis=0)

# Preprocessamento
def wordopt(text):
    text = text.lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub("\\W", " ", text)
    text = re.sub('https?://\S+|www.\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w*\d\w*', '', text)
    return text

data_merge['text'] = data_merge['text'].apply(wordopt)

# Prepara os dados
x = data_merge['text']
y = data_merge['class']

# Vectoriza o texto
vectorization = TfidfVectorizer()
xv = vectorization.fit_transform(x)

# Cross-validation
LR = LogisticRegression()
RF = RandomForestClassifier(random_state=0)
DT = DecisionTreeClassifier()

models = [('Logistic Regression', LR), ('Decision Tree', DT), ('Random Forest', RF)]

for model_name, model in models:
    scores = cross_val_score(model, xv, y, cv=5)
    print(f"{model_name} Cross-Validation Accuracy: {np.mean(scores)}")

# Treina e avalia o modelo
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)

for model_name, model in models:
    model.fit(vectorization.transform(x_train), y_train)
    pred = model.predict(vectorization.transform(x_test))
    print(f"\n{model_name} Evaluation:")
    print(classification_report(y_test, pred))

# Ensemble Logistic Regression & Random Forest Classifier
ensemble_model = VotingClassifier(
    estimators=[('LR', LR), ('RF', RF)],
    voting='hard'
)

# Cross-validation
scores = cross_val_score(ensemble_model, xv, y, cv=5)
print(f"Ensemble Cross-Validation Accuracy: {np.mean(scores)}")

# Treina o modelo
x_train, x_test, y_train, y_test = train_test_split(xv, y, test_size=0.25, random_state=0)

ensemble_model.fit(x_train, y_train)
pred = ensemble_model.predict(x_test)

# Avalia o modelo
print("Ensemble Evaluation:")
print(classification_report(y_test, pred))
